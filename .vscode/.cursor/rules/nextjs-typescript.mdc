---
description: 
globs: 
alwaysApply: false
---
# Next.js + TypeScript 프로젝트 규칙

## 프로젝트 구조
이 프로젝트는 [package.json](mdc:package.json)에 정의된 Next.js 15.2.4 버전을 사용합니다.

## 파일 구조 표준
app/ # App Router 사용
├── (routes)/ # 라우트 그룹
├── api/ # API 라우트
├── globals.css # 전역 스타일
└── layout.tsx # 루트 레이아웃
components/ # 재사용 가능한 컴포넌트
├── ui/ # components.json 기반 shadcn/ui
└── feature/ # 기능별 컴포넌트
lib/ # 유틸리티 및 설정
├── utils.ts # 공통 유틸리티
├── validations/ # Zod 스키마
└── api/ # API 클라이언트
hooks/ # 커스텀 훅
types/ # 타입 정의

## TypeScript 설정
[tsconfig.json](mdc:tsconfig.json)에 정의된 strict 모드 사용:
```typescript
// 타입 안전성을 위한 규칙
- 모든 변수에 명시적 타입 지정
- any 타입 사용 금지
- 옵셔널 체이닝(?.) 적극 활용
- 타입 가드 함수 작성
```

## Next.js 특화 규칙
1. **App Router 사용**
   - 페이지는 `app/` 디렉토리에 구성
   - 서버 컴포넌트를 기본으로 사용
   - 클라이언트 컴포넌트는 'use client' 지시어 명시

2. **API 라우트**
   - REST API는 `app/api/` 에 구성
   - 요청/응답 타입 정의 필수
   - 에러 처리 미들웨어 사용

3. **스타일링**
   - [tailwind.config.ts](mdc:tailwind.config.ts) 기반 Tailwind CSS
   - shadcn/ui 컴포넌트 활용
   - CSS Modules 또는 Styled Components 병행 사용

## 컴포넌트 작성 규칙
```typescript
// 함수형 컴포넌트 표준 템플릿
interface ComponentProps {
  // Props 타입 정의
}

export function ComponentName({ prop1, prop2 }: ComponentProps) {
  // 1. 상태 관리 (useState, useReducer)
  // 2. 사이드 이펙트 (useEffect)
  // 3. 커스텀 훅 사용
  // 4. 이벤트 핸들러
  // 5. 렌더링

  return (
    <div className="tailwind-classes">
      {/* JSX 구조 */}
    </div>
  );
}
```

## 최적화 가이드
- `next/image` 컴포넌트 사용
- `next/font` 를 통한 폰트 최적화
- `dynamic` import로 코드 스플리팅

- 메타데이터 API로 SEO 최적화